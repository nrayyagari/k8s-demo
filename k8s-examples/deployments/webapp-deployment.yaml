# WHY: Complete example showing deployment + service together
# PROBLEM: Need both app reliability AND stable access
# SOLUTION: Deployment for reliability + Service for stable endpoint

apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp
  labels:
    app: webapp
spec:
  replicas: 5
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
      - name: webapp
        image: nginx:alpine
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
---
# Service provides stable endpoint to reach the deployment
apiVersion: v1
kind: Service
metadata:
  name: webapp-service
spec:
  selector:
    app: webapp  # Must match deployment labels
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP

# THE PATTERN:
# 1. Deployment creates reliable, scalable pods
# 2. Service provides stable way to reach those pods
# 3. Labels connect service to deployment
# 4. This is the foundation for most Kubernetes workloads