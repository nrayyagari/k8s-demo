# Namespace-Level Pod Security Enforcement
# Demonstrates different enforcement modes and gradual migration

---
# 1. WARN MODE: Shows warnings but allows pods
apiVersion: v1
kind: Namespace
metadata:
  name: security-warn
  labels:
    pod-security.kubernetes.io/warn: restricted
    # Only warn mode - violations show warnings but pods are created
    environment: development
    security-mode: warn-only

---
# 2. AUDIT MODE: Logs violations but allows pods  
apiVersion: v1
kind: Namespace
metadata:
  name: security-audit
  labels:
    pod-security.kubernetes.io/audit: baseline
    # Only audit mode - violations are logged but pods are created
    environment: staging
    security-mode: audit-only

---
# 3. ENFORCE MODE: Rejects violating pods
apiVersion: v1
kind: Namespace
metadata:
  name: security-enforce
  labels:
    pod-security.kubernetes.io/enforce: baseline
    # Only enforce mode - violations are rejected
    environment: production
    security-mode: enforce-only

---
# 4. COMBINED MODES: Gradual migration strategy
apiVersion: v1
kind: Namespace
metadata:
  name: security-migration
  labels:
    # Current enforcement level
    pod-security.kubernetes.io/enforce: privileged
    # Warn about baseline violations (next step)
    pod-security.kubernetes.io/warn: baseline
    # Audit restricted violations (future goal)
    pod-security.kubernetes.io/audit: restricted
    environment: production
    security-mode: migration-strategy

---
# 5. MULTI-VERSION SUPPORT: Different versions for different modes
apiVersion: v1
kind: Namespace
metadata:
  name: security-versioned
  labels:
    # Enforce current version baseline
    pod-security.kubernetes.io/enforce: baseline
    pod-security.kubernetes.io/enforce-version: v1.29
    # Warn about next version requirements
    pod-security.kubernetes.io/warn: restricted
    pod-security.kubernetes.io/warn-version: v1.30
    # Audit everything
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/audit-version: latest
    environment: production
    security-mode: version-aware

---
# TEST PODS: Deploy to different namespaces to see behavior

# Pod that violates restricted but passes baseline
apiVersion: v1
kind: Pod
metadata:
  name: baseline-compliant
  namespace: security-warn
  labels:
    compliance-level: baseline
spec:
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
  containers:
  - name: app
    image: busybox:1.36
    command: ["sleep", "3600"]
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
    # Missing: readOnlyRootFilesystem, seccompProfile
    # This violates RESTRICTED but passes BASELINE

---
# Pod that violates baseline (will be rejected in enforce namespace)
apiVersion: v1
kind: Pod
metadata:
  name: baseline-violation
  namespace: security-audit  # Will be allowed with audit logging
  labels:
    compliance-level: privileged
spec:
  containers:
  - name: app
    image: busybox:1.36
    command: ["sleep", "3600"]
    securityContext:
      privileged: true  # Violates BASELINE
    # This will be logged as violation but allowed in audit-only namespace

---
# Compliant pod for migration namespace
apiVersion: v1
kind: Pod
metadata:
  name: migration-safe
  namespace: security-migration
  labels:
    compliance-level: privileged
spec:
  containers:
  - name: app
    image: busybox:1.36
    command: ["sleep", "3600"]
    # No security context - this passes privileged (current enforcement)
    # But will generate warnings/audit logs for baseline/restricted

---
# Restricted-compliant pod
apiVersion: v1
kind: Pod
metadata:
  name: restricted-compliant
  namespace: security-enforce
  labels:
    compliance-level: restricted
spec:
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    runAsGroup: 65534
    fsGroup: 65534
    seccompProfile:
      type: RuntimeDefault
  containers:
  - name: app
    image: busybox:1.36
    command: ["sleep", "3600"]
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 65534
      runAsGroup: 65534
      capabilities:
        drop:
        - ALL
      seccompProfile:
        type: RuntimeDefault
    volumeMounts:
    - name: tmp
      mountPath: /tmp
  volumes:
  - name: tmp
    emptyDir: {}

---
# Deployment demonstrating enforcement in action
apiVersion: apps/v1
kind: Deployment
metadata:
  name: security-test-deployment
  namespace: security-enforce
  labels:
    app: security-test
spec:
  replicas: 2
  selector:
    matchLabels:
      app: security-test
  template:
    metadata:
      labels:
        app: security-test
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 2000
      containers:
      - name: web
        image: nginx:1.27
        ports:
        - containerPort: 8080
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache/nginx
        - name: var-run
          mountPath: /var/run
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-cache
        emptyDir: {}
      - name: var-run
        emptyDir: {}

---
# Service for the deployment
apiVersion: v1
kind: Service
metadata:
  name: security-test-service
  namespace: security-enforce
spec:
  selector:
    app: security-test
  ports:
  - port: 8080
    targetPort: 8080

# ENFORCEMENT MODE BEHAVIOR:
#
# 1. WARN MODE:
#    - Pods are created successfully
#    - Violations generate warnings in kubectl output
#    - No impact on pod creation
#    - Useful for understanding impact before enforcement
#
# 2. AUDIT MODE:
#    - Pods are created successfully  
#    - Violations are logged to audit logs
#    - Can be monitored for compliance tracking
#    - Good for compliance reporting without blocking
#
# 3. ENFORCE MODE:
#    - Violating pods are REJECTED
#    - Admission webhook blocks creation
#    - Production enforcement of security standards
#    - Should be used after warn/audit phases
#
# 4. COMBINED STRATEGY:
#    - enforce: current acceptable level
#    - warn: next target level
#    - audit: future goal level
#    - Enables gradual migration with visibility

# MIGRATION STRATEGY:
# Week 1: Add warn labels, observe warnings
# Week 2: Add audit labels, monitor audit logs
# Week 3: Change enforce to baseline (if baseline warnings are clean)
# Week 4: Change warn to restricted (prepare for next migration)
# Month 2: Change enforce to restricted (if restricted warnings are clean)

# TESTING COMMANDS:
#
# 1. Create all namespaces and test pods:
# kubectl apply -f 04-namespace-enforcement.yaml
#
# 2. Check which pods were created successfully:
# kubectl get pods -A | grep security-
#
# 3. Try to create a violating pod in enforce namespace (should fail):
# kubectl apply -f - <<EOF
# apiVersion: v1
# kind: Pod
# metadata:
#   name: will-fail
#   namespace: security-enforce
# spec:
#   containers:
#   - name: bad
#     image: busybox
#     securityContext:
#       privileged: true
# EOF
#
# 4. Create same violating pod in audit namespace (should succeed with logging):
# kubectl apply -f - <<EOF
# apiVersion: v1
# kind: Pod
# metadata:
#   name: will-succeed-but-audit
#   namespace: security-audit
# spec:
#   containers:
#   - name: bad
#     image: busybox
#     securityContext:
#       privileged: true
# EOF
#
# 5. Check namespace labels and security policies:
# kubectl get namespace security-warn -o yaml | grep pod-security
# kubectl get namespace security-audit -o yaml | grep pod-security
# kubectl get namespace security-enforce -o yaml | grep pod-security
# kubectl get namespace security-migration -o yaml | grep pod-security
#
# 6. View deployment status in enforce namespace:
# kubectl get deployment security-test-deployment -n security-enforce
# kubectl get pods -l app=security-test -n security-enforce
#
# 7. Test service connectivity:
# kubectl run test-client --image=busybox:1.36 --rm -it --restart=Never \
#   --namespace=security-enforce -- nc -zv security-test-service 8080
#
# 8. Check for policy violations in events:
# kubectl get events -A --field-selector type=Warning | grep -i security
#
# 9. Simulate migration by updating namespace labels:
# kubectl label namespace security-migration pod-security.kubernetes.io/enforce=baseline --overwrite
# kubectl label namespace security-migration pod-security.kubernetes.io/warn=restricted --overwrite
#
# 10. View audit logs (if available):
# # Check your cluster's audit log configuration for pod security violations