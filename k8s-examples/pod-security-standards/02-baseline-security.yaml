# Baseline Security Profile - Kubernetes Pod Security Standards
# Prevents known privilege escalations while maintaining usability

---
# Namespace with Baseline Pod Security Standard
apiVersion: v1
kind: Namespace
metadata:
  name: baseline-security
  labels:
    # Pod Security Standards labels (Kubernetes 1.23+)
    pod-security.kubernetes.io/enforce: baseline
    pod-security.kubernetes.io/audit: baseline  
    pod-security.kubernetes.io/warn: baseline
    security-profile: baseline
    environment: production

---
# 1. WEB APPLICATION: Typical web app with baseline security
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app-baseline
  namespace: baseline-security
  labels:
    app: web-app
    security-profile: baseline
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web-app
  template:
    metadata:
      labels:
        app: web-app
        tier: frontend
    spec:
      # Baseline security requirements
      securityContext:
        runAsNonRoot: true       # Required by many security policies
        runAsUser: 1000          # Specific non-root user
        runAsGroup: 1000         # Specific group
        fsGroup: 2000            # Volume group ownership
        seccompProfile:
          type: RuntimeDefault   # Use default seccomp profile
      containers:
      - name: nginx
        image: nginx:1.27
        ports:
        - containerPort: 8080    # Non-privileged port
        securityContext:
          allowPrivilegeEscalation: false  # Baseline requirement
          capabilities:
            drop:
            - ALL                # Drop all capabilities
            add:
            - NET_BIND_SERVICE   # Add back only what's needed
          readOnlyRootFilesystem: true    # Good practice
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache/nginx
        - name: var-run
          mountPath: /var/run
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-cache
        emptyDir: {}
      - name: var-run
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: web-app-service
  namespace: baseline-security
spec:
  selector:
    app: web-app
  ports:
  - port: 8080
    targetPort: 8080

---
# 2. BACKGROUND JOB: Batch processing with baseline security
apiVersion: batch/v1
kind: Job
metadata:
  name: data-processor-baseline
  namespace: baseline-security
  labels:
    app: data-processor
    security-profile: baseline
spec:
  template:
    metadata:
      labels:
        app: data-processor
        tier: batch
    spec:
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
        runAsGroup: 2000
        fsGroup: 3000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: processor
        image: busybox:1.36
        command: ["sh", "-c", "echo 'Processing data...' && sleep 30 && echo 'Done'"]
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: work-dir
          mountPath: /work
      volumes:
      - name: work-dir
        emptyDir: {}

---
# 3. DATABASE: StatefulSet with persistent storage and baseline security
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-baseline
  namespace: baseline-security
  labels:
    app: postgres
    security-profile: baseline
spec:
  serviceName: postgres-baseline
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        tier: database
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999           # postgres user UID
        runAsGroup: 999          # postgres group GID
        fsGroup: 999             # postgres group for volumes
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: postgres
        image: postgres:16
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "myapp"
        - name: POSTGRES_USER
          value: "appuser"
        - name: POSTGRES_PASSWORD
          value: "securepass123"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          # Note: readOnlyRootFilesystem: true would require extensive volume mounts
          # for PostgreSQL, so we skip it for this database example
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-baseline
  namespace: baseline-security
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432

---
# 4. EXAMPLE OF WHAT BASELINE BLOCKS: Privileged container
apiVersion: v1
kind: Pod
metadata:
  name: blocked-privileged-pod
  namespace: baseline-security
  labels:
    example: will-be-blocked
spec:
  containers:
  - name: privileged-container
    image: busybox:1.36
    command: ["sleep", "3600"]
    securityContext:
      privileged: true  # This will be BLOCKED by baseline policy
# This pod will be rejected with error:
# "violates PodSecurity baseline: privileged containers are not allowed"

---
# 5. EXAMPLE OF WHAT BASELINE BLOCKS: Host network access
apiVersion: v1
kind: Pod
metadata:
  name: blocked-hostnetwork-pod
  namespace: baseline-security
  labels:
    example: will-be-blocked
spec:
  hostNetwork: true  # This will be BLOCKED by baseline policy
  containers:
  - name: host-network-container
    image: busybox:1.36
    command: ["sleep", "3600"]
# This pod will be rejected with error:
# "violates PodSecurity baseline: host namespaces are not allowed"

---
# 6. TEST CLIENT: For connectivity testing
apiVersion: v1
kind: Pod
metadata:
  name: baseline-test-client
  namespace: baseline-security
  labels:
    app: test-client
spec:
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    seccompProfile:
      type: RuntimeDefault
  containers:
  - name: client
    image: busybox:1.36
    command: ["sleep", "3600"]
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
    volumeMounts:
    - name: tmp
      mountPath: /tmp
  volumes:
  - name: tmp
    emptyDir: {}

# BASELINE SECURITY PROFILE REQUIREMENTS:
#
# BLOCKED by Baseline:
# ✗ privileged: true
# ✗ hostNetwork: true
# ✗ hostPID: true  
# ✗ hostIPC: true
# ✗ hostPath volumes (with exceptions)
# ✗ Host ports < 1024
# ✗ AppArmor profiles other than runtime/default
# ✗ SELinux custom policies
# ✗ /proc mount masks
# ✗ Sysctls (with exceptions)
# ✗ Volume types: hostPath, nfs, iscsi, etc.
#
# ALLOWED by Baseline:
# ✓ Running as root (runAsNonRoot not required)
# ✓ Any runAsUser value
# ✓ allowPrivilegeEscalation: true (but false is recommended)
# ✓ Most volume types (emptyDir, configMap, secret, etc.)
# ✓ Most capabilities (but dropping ALL is recommended)
# ✓ Custom seccomp profiles

# TESTING COMMANDS:
#
# 1. Deploy baseline security examples:
# kubectl apply -f 02-baseline-security.yaml
#
# 2. Check that compliant pods are created successfully:
# kubectl get pods -n baseline-security
# kubectl get deployment web-app-baseline -n baseline-security
# kubectl get job data-processor-baseline -n baseline-security
# kubectl get statefulset postgres-baseline -n baseline-security
#
# 3. Try to create blocked pods (should fail):
# kubectl apply -f 02-baseline-security.yaml --include-selector="example=will-be-blocked"
# # These should show admission errors
#
# 4. Test user IDs and security contexts:
# kubectl exec -it $(kubectl get pod -l app=web-app -n baseline-security -o jsonpath='{.items[0].metadata.name}') -n baseline-security -- id
# kubectl exec -it baseline-test-client -n baseline-security -- id
#
# 5. Test connectivity between services:
# kubectl exec -it baseline-test-client -n baseline-security -- nc -zv web-app-service 8080
# kubectl exec -it baseline-test-client -n baseline-security -- nc -zv postgres-baseline 5432
#
# 6. Check job completion:
# kubectl logs job/data-processor-baseline -n baseline-security
# kubectl get job data-processor-baseline -n baseline-security
#
# 7. Verify namespace security labels:
# kubectl get namespace baseline-security -o yaml | grep pod-security
#
# 8. Check for any policy violations in events:
# kubectl get events -n baseline-security --field-selector type=Warning
#
# 9. Test filesystem write permissions:
# kubectl exec -it baseline-test-client -n baseline-security -- touch /tmp/test-file
# kubectl exec -it baseline-test-client -n baseline-security -- touch /test-file  # Should fail