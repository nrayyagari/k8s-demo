# Restricted Security Profile - Maximum Security Hardening
# Implements current pod hardening best practices

---
# Namespace with Restricted Pod Security Standard
apiVersion: v1
kind: Namespace
metadata:
  name: restricted-security
  labels:
    # Pod Security Standards labels (Kubernetes 1.23+)
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
    security-profile: restricted
    environment: production
    compliance: high-security

---
# 1. SECURE WEB APPLICATION: Maximum security restrictions
apiVersion: apps/v1
kind: Deployment
metadata:
  name: secure-web-app
  namespace: restricted-security
  labels:
    app: secure-web-app
    security-profile: restricted
spec:
  replicas: 2
  selector:
    matchLabels:
      app: secure-web-app
  template:
    metadata:
      labels:
        app: secure-web-app
        tier: frontend
    spec:
      # RESTRICTED REQUIREMENTS - Pod Level
      securityContext:
        runAsNonRoot: true              # REQUIRED
        runAsUser: 65534                # REQUIRED (must be > 0)
        runAsGroup: 65534               # REQUIRED (must be > 0)
        fsGroup: 65534                  # Volume group ownership
        seccompProfile:
          type: RuntimeDefault          # REQUIRED
        supplementalGroups: [65534]     # Additional groups
      containers:
      - name: nginx
        image: nginx:1.27
        ports:
        - containerPort: 8080
        # RESTRICTED REQUIREMENTS - Container Level
        securityContext:
          allowPrivilegeEscalation: false    # REQUIRED
          readOnlyRootFilesystem: true       # REQUIRED
          runAsNonRoot: true                 # REQUIRED
          runAsUser: 65534                   # REQUIRED (> 0)
          runAsGroup: 65534                  # REQUIRED (> 0)
          capabilities:
            drop:
            - ALL                            # REQUIRED
          seccompProfile:
            type: RuntimeDefault             # REQUIRED
        # Provide necessary writable volumes
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache/nginx
        - name: var-run
          mountPath: /var/run
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-cache
        emptyDir: {}
      - name: var-run
        emptyDir: {}
      - name: nginx-config
        configMap:
          name: nginx-restricted-config

---
# ConfigMap for restricted nginx
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-restricted-config
  namespace: restricted-security
data:
  default.conf: |
    server {
        listen 8080;
        server_name localhost;
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
        }
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
    }

---
apiVersion: v1
kind: Service
metadata:
  name: secure-web-app-service
  namespace: restricted-security
spec:
  selector:
    app: secure-web-app
  ports:
  - port: 8080
    targetPort: 8080

---
# 2. SECURE MICROSERVICE: API with restricted security
apiVersion: apps/v1
kind: Deployment
metadata:
  name: secure-api
  namespace: restricted-security
  labels:
    app: secure-api
    security-profile: restricted
spec:
  replicas: 1
  selector:
    matchLabels:
      app: secure-api
  template:
    metadata:
      labels:
        app: secure-api
        tier: backend
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001                # Custom app user
        runAsGroup: 10001               # Custom app group
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: api
        image: httpd:2.4
        ports:
        - containerPort: 8080
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          runAsGroup: 10001
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: apache-run
          mountPath: /usr/local/apache2/logs
        - name: apache-config
          mountPath: /usr/local/apache2/conf/httpd.conf
          subPath: httpd.conf
          readOnly: true
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "64Mi"
            cpu: "100m"
      volumes:
      - name: tmp
        emptyDir: {}
      - name: apache-run
        emptyDir: {}
      - name: apache-config
        configMap:
          name: apache-restricted-config

---
# ConfigMap for restricted Apache
apiVersion: v1
kind: ConfigMap
metadata:
  name: apache-restricted-config
  namespace: restricted-security
data:
  httpd.conf: |
    Listen 8080
    ServerRoot "/usr/local/apache2"
    PidFile /usr/local/apache2/logs/httpd.pid
    LoadModule dir_module modules/mod_dir.so
    LoadModule mime_module modules/mod_mime.so
    LoadModule rewrite_module modules/mod_rewrite.so
    DirectoryIndex index.html
    DocumentRoot "/usr/local/apache2/htdocs"
    ErrorLog /usr/local/apache2/logs/error.log
    LogLevel warn
    # Security configurations
    ServerTokens Prod
    ServerSignature Off
    Header always set X-Frame-Options DENY
    Header always set X-Content-Type-Options nosniff

---
apiVersion: v1
kind: Service
metadata:
  name: secure-api-service
  namespace: restricted-security
spec:
  selector:
    app: secure-api
  ports:
  - port: 8080
    targetPort: 8080

---
# 3. SECURE CRONJOB: Scheduled task with restricted security
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secure-cleanup-job
  namespace: restricted-security
  labels:
    app: cleanup-job
    security-profile: restricted
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: cleanup-job
            tier: batch
        spec:
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 20001
            runAsGroup: 20001
            fsGroup: 20001
            seccompProfile:
              type: RuntimeDefault
          containers:
          - name: cleanup
            image: busybox:1.36
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting cleanup at $(date)"
              echo "Cleaning up temporary files..."
              find /work -name "*.tmp" -delete 2>/dev/null || true
              echo "Cleanup completed at $(date)"
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 20001
              runAsGroup: 20001
              capabilities:
                drop:
                - ALL
              seccompProfile:
                type: RuntimeDefault
            volumeMounts:
            - name: work-dir
              mountPath: /work
            - name: tmp
              mountPath: /tmp
            resources:
              requests:
                memory: "16Mi"
                cpu: "25m"
              limits:
                memory: "32Mi"
                cpu: "50m"
          volumes:
          - name: work-dir
            emptyDir: {}
          - name: tmp
            emptyDir: {}

---
# 4. EXAMPLE: Pod that violates restricted policy
apiVersion: v1
kind: Pod
metadata:
  name: restricted-violation-example
  namespace: restricted-security
  labels:
    example: policy-violation
spec:
  securityContext:
    runAsUser: 0  # VIOLATION: Cannot run as root (UID 0)
  containers:
  - name: violating-container
    image: busybox:1.36
    command: ["sleep", "3600"]
    securityContext:
      allowPrivilegeEscalation: true  # VIOLATION: Must be false
      # Missing required fields will also cause violations
# This pod will be REJECTED with errors like:
# "violates PodSecurity restricted: runAsNonRoot != true"
# "violates PodSecurity restricted: allowPrivilegeEscalation != false"

---
# 5. TEST CLIENT: Maximum security for testing
apiVersion: v1
kind: Pod
metadata:
  name: restricted-test-client
  namespace: restricted-security
  labels:
    app: test-client
    security-profile: restricted
spec:
  securityContext:
    runAsNonRoot: true
    runAsUser: 30001
    runAsGroup: 30001
    fsGroup: 30001
    seccompProfile:
      type: RuntimeDefault
  containers:
  - name: client
    image: busybox:1.36
    command: ["sleep", "3600"]
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 30001
      runAsGroup: 30001
      capabilities:
        drop:
        - ALL
      seccompProfile:
        type: RuntimeDefault
    volumeMounts:
    - name: tmp
      mountPath: /tmp
    resources:
      requests:
        memory: "16Mi"
        cpu: "25m"
      limits:
        memory: "32Mi"
        cpu: "50m"
  volumes:
  - name: tmp
    emptyDir: {}

# RESTRICTED SECURITY PROFILE REQUIREMENTS:
#
# ALL Baseline requirements PLUS:
#
# REQUIRED at Pod or Container level:
# ✓ runAsNonRoot: true
# ✓ runAsUser: > 0 (cannot be root)
# ✓ runAsGroup: > 0 (cannot be root group)  
# ✓ allowPrivilegeEscalation: false
# ✓ readOnlyRootFilesystem: true
# ✓ capabilities.drop: ["ALL"]
# ✓ seccompProfile.type: RuntimeDefault or Localhost
#
# BLOCKED Volume Types:
# ✗ hostPath (all paths)
# ✗ nfs, iscsi, fc, rbd, cephfs, glusterfs
# ✗ azureDisk, azureFile, cinder, gcePersistentDisk
# ✗ awsElasticBlockStore, vsphereVolume
#
# ALLOWED Volume Types:
# ✓ configMap, secret, emptyDir, downwardAPI
# ✓ projected, persistentVolumeClaim
# ✓ csi (if not hostPath based)

# TESTING COMMANDS:
#
# 1. Deploy restricted security examples:
# kubectl apply -f 03-restricted-security.yaml
#
# 2. Verify all compliant resources are created:
# kubectl get all -n restricted-security
# kubectl get configmap -n restricted-security
#
# 3. Test that violation examples are rejected:
# kubectl apply -f - <<EOF
# apiVersion: v1
# kind: Pod
# metadata:
#   name: test-violation
#   namespace: restricted-security
# spec:
#   containers:
#   - name: bad
#     image: busybox
#     securityContext:
#       runAsUser: 0  # Should be rejected
# EOF
#
# 4. Verify security contexts of running pods:
# kubectl exec -it $(kubectl get pod -l app=secure-web-app -n restricted-security -o jsonpath='{.items[0].metadata.name}') -n restricted-security -- id
# kubectl exec -it $(kubectl get pod -l app=secure-api -n restricted-security -o jsonpath='{.items[0].metadata.name}') -n restricted-security -- id
# kubectl exec -it restricted-test-client -n restricted-security -- id
#
# 5. Test read-only filesystem (should fail to write to root):
# kubectl exec -it restricted-test-client -n restricted-security -- touch /test-file  # Should fail
# kubectl exec -it restricted-test-client -n restricted-security -- touch /tmp/test-file  # Should work
#
# 6. Test connectivity between services:
# kubectl exec -it restricted-test-client -n restricted-security -- nc -zv secure-web-app-service 8080
# kubectl exec -it restricted-test-client -n restricted-security -- nc -zv secure-api-service 8080
#
# 7. Check CronJob schedule and execution:
# kubectl get cronjob secure-cleanup-job -n restricted-security
# kubectl get jobs -n restricted-security
#
# 8. Verify namespace security enforcement:
# kubectl get namespace restricted-security -o yaml | grep pod-security
#
# 9. Check for policy violations in events:
# kubectl get events -n restricted-security --field-selector type=Warning
#
# 10. Test capabilities (should show minimal capabilities):
# kubectl exec -it restricted-test-client -n restricted-security -- capsh --print