# WHY: Kubernetes solves real problems, learn them one by one
# PROBLEM: Kubernetes feels overwhelming with too many concepts
# SOLUTION: Start with fundamental questions and build up gradually

# =================== THE FUNDAMENTAL QUESTIONS ===================

# Question 1: "How do I run my app reliably?"
# Answer: DEPLOYMENTS → deployments/SIMPLE-DEPLOYMENT.yaml
# Why: Containers crash, need automatic restarts and multiple copies

# Question 2: "How do users reach my app?"  
# Answer: SERVICES → services/SIMPLE-SERVICE.yaml
# Why: Pod IPs change, need stable endpoint with load balancing

# Question 3: "How do I avoid hardcoding secrets?"
# Answer: CONFIGMAPS & SECRETS → configmaps-secrets/SIMPLE-CONFIG.yaml  
# Why: Security risk and inflexibility to hardcode passwords/config

# Question 4: "How does Kubernetes know my app is healthy?"
# Answer: HEALTH CHECKS → health-checks/SIMPLE-GUIDE.yaml
# Why: App might run but be broken, need automatic detection

# Question 5: "How do I handle traffic spikes automatically?"
# Answer: AUTOSCALING → autoscaling/SIMPLE-AUTOSCALING.yaml
# Why: Manual scaling is slow, waste money on idle resources

# =================== SIMPLE LEARNING PATH ===================

# 1. Start with deployments and services
#    - Get your app running
#    - Make it accessible
#    - Learn kubectl basics

# 2. Add configuration
#    - Move secrets out of your app
#    - Use ConfigMaps for settings
#    - Practice updates

# 3. Add health checks
#    - Prevent broken deployments
#    - Enable zero-downtime updates
#    - Make your app more reliable

# 4. Add autoscaling
#    - Handle traffic spikes
#    - Optimize costs
#    - Learn about resource management

# 5. Then explore advanced topics
#    - StatefulSets for databases
#    - DaemonSets for node agents
#    - Ingress for external access

# =================== SIMPLE COMMANDS ===================

# Apply any example:
# kubectl apply -f <filename>.yaml

# Check what's running:
# kubectl get pods
# kubectl get services
# kubectl get deployments

# Debug issues:
# kubectl describe pod <pod-name>
# kubectl logs <pod-name>

# Clean up:
# kubectl delete -f <filename>.yaml

# =================== THAT'S IT! ===================

# Kubernetes is powerful but you don't need to learn everything at once.
# Start with these simple examples and build up your knowledge gradually.
# Each example solves a real problem and teaches core concepts.
# 
# Remember: Simple is better than complex!