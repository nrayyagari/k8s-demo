# Basic Istio Service Mesh Setup
# Purpose: Production-ready Istio deployment with traffic management
# Use case: Advanced microservices communication with comprehensive control

---
# Namespace with automatic Istio injection
apiVersion: v1
kind: Namespace
metadata:
  name: istio-production
  labels:
    istio-injection: enabled
    environment: production

---
# Payment Service - Backend microservice
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-service
  namespace: istio-production
  labels:
    app: payment-service
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: payment-service
      version: v1
  template:
    metadata:
      labels:
        app: payment-service
        version: v1
      annotations:
        # Istio sidecar configuration
        sidecar.istio.io/proxyCPU: "100m"
        sidecar.istio.io/proxyMemory: "128Mi"
        # Custom proxy configuration
        traffic.sidecar.istio.io/includeInboundPorts: "8080"
    spec:
      containers:
      - name: payment-service
        image: nginx:1.21
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        # Custom configuration
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: html
          mountPath: /usr/share/nginx/html/health
          subPath: health.html
        - name: html
          mountPath: /usr/share/nginx/html/ready
          subPath: ready.html
      volumes:
      - name: config
        configMap:
          name: payment-service-config
      - name: html
        configMap:
          name: payment-service-html

---
# Order Service - Frontend microservice
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: istio-production
  labels:
    app: order-service
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-service
      version: v1
  template:
    metadata:
      labels:
        app: order-service
        version: v1
    spec:
      containers:
      - name: order-service
        image: nginx:1.21
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: html
          mountPath: /usr/share/nginx/html/health
          subPath: health.html
        - name: html
          mountPath: /usr/share/nginx/html/ready
          subPath: ready.html
      volumes:
      - name: config
        configMap:
          name: order-service-config
      - name: html
        configMap:
          name: order-service-html

---
# Payment Service Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: payment-service-config
  namespace: istio-production
data:
  nginx.conf: |
    server {
        listen 8080;
        server_name localhost;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
        
        location /health {
            return 200 "payment-service healthy\n";
            add_header Content-Type text/plain;
        }
        
        location /ready {
            return 200 "payment-service ready\n";
            add_header Content-Type text/plain;
        }
        
        location /api/v1/process-payment {
            return 200 '{"status": "success", "transaction_id": "txn_123", "amount": 100.00}\n';
            add_header Content-Type application/json;
        }
    }

---
# Order Service Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: order-service-config
  namespace: istio-production
data:
  nginx.conf: |
    server {
        listen 8080;
        server_name localhost;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
        
        location /health {
            return 200 "order-service healthy\n";
            add_header Content-Type text/plain;
        }
        
        location /ready {
            return 200 "order-service ready\n";
            add_header Content-Type text/plain;
        }
        
        # Call payment service
        location /api/v1/create-order {
            proxy_pass http://payment-service:8080/api/v1/process-payment;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Request-ID $request_id;
        }
    }

---
# HTML content ConfigMaps
apiVersion: v1
kind: ConfigMap
metadata:
  name: payment-service-html
  namespace: istio-production
data:
  health.html: "payment-service healthy"
  ready.html: "payment-service ready"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: order-service-html
  namespace: istio-production
data:
  health.html: "order-service healthy"
  ready.html: "order-service ready"

---
# Payment Service
apiVersion: v1
kind: Service
metadata:
  name: payment-service
  namespace: istio-production
  labels:
    app: payment-service
spec:
  selector:
    app: payment-service
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP

---
# Order Service
apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: istio-production
  labels:
    app: order-service
spec:
  selector:
    app: order-service
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP

---
# Istio Gateway for external access
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: production-gateway
  namespace: istio-production
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - production.istio.local
    - orders.istio.local

---
# VirtualService for routing
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: production-routes
  namespace: istio-production
spec:
  hosts:
  - production.istio.local
  - orders.istio.local
  gateways:
  - production-gateway
  http:
  - match:
    - uri:
        prefix: /api/v1/orders
    route:
    - destination:
        host: order-service
        port:
          number: 8080
    timeout: 5s
    retries:
      attempts: 3
      perTryTimeout: 2s
      retryOn: 5xx,reset,connect-failure,refused-stream
  - match:
    - uri:
        prefix: /api/v1/payments
    route:
    - destination:
        host: payment-service
        port:
          number: 8080
    timeout: 3s
    retries:
      attempts: 2
      perTryTimeout: 1s

---
# DestinationRule for traffic policies
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: payment-service-policies
  namespace: istio-production
spec:
  host: payment-service
  trafficPolicy:
    loadBalancer:
      simple: LEAST_CONN
    connectionPool:
      tcp:
        maxConnections: 100
        connectTimeout: 30s
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 2
        maxRetries: 3
    outlierDetection:
      consecutive5xxErrors: 3
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50

---
# DestinationRule for order service
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: order-service-policies
  namespace: istio-production
spec:
  host: order-service
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
    connectionPool:
      tcp:
        maxConnections: 50
      http:
        http1MaxPendingRequests: 5
        maxRequestsPerConnection: 1
    outlierDetection:
      consecutive5xxErrors: 2
      interval: 20s
      baseEjectionTime: 20s

---
# PeerAuthentication for mTLS
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default-mtls
  namespace: istio-production
spec:
  mtls:
    mode: STRICT

---
# AuthorizationPolicy for zero-trust security
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: payment-service-authz
  namespace: istio-production
spec:
  selector:
    matchLabels:
      app: payment-service
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/istio-production/sa/default"]
    to:
    - operation:
        methods: ["GET", "POST"]
        paths: ["/api/v1/process-payment", "/health", "/ready"]

---
# Instructions:
# 
# 1. Ensure Istio is installed:
#    istioctl verify-install
#
# 2. Deploy this configuration:
#    kubectl apply -f 01-basic-istio.yaml
#
# 3. Check deployment status:
#    kubectl get pods -n istio-production
#    # Each pod should have 2/2 containers (app + istio-proxy)
#
# 4. Verify Istio configuration:
#    istioctl analyze -n istio-production
#
# 5. Check proxy status:
#    istioctl proxy-status
#
# 6. Get ingress gateway IP:
#    kubectl get service istio-ingressgateway -n istio-system
#
# 7. Test external access (replace EXTERNAL-IP):
#    curl -H "Host: production.istio.local" http://EXTERNAL-IP/api/v1/payments
#    curl -H "Host: orders.istio.local" http://EXTERNAL-IP/api/v1/orders
#
# 8. Test internal service communication:
#    kubectl exec -n istio-production deploy/order-service -- curl payment-service:8080/api/v1/process-payment
#
# 9. Access Kiali dashboard:
#    istioctl dashboard kiali
#
# 10. View metrics in Grafana:
#     istioctl dashboard grafana
#
# Key Features Demonstrated:
# - Automatic mTLS between all services
# - Advanced traffic routing and load balancing  
# - Circuit breaker and retry policies
# - Zero-trust security with authorization policies
# - Gateway for external traffic management
# - Rich observability and metrics
# - Service-to-service authentication
# - Request timeout and retry configuration
#
# Clean up:
# kubectl delete namespace istio-production