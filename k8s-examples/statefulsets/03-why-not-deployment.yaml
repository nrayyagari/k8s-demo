# WHY: Can't I just use Deployment + PersistentVolume?
# PROBLEM: Database cluster needs master/slave roles with individual storage
# SOLUTION: StatefulSet provides identity + individual storage that Deployment can't
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-cluster-attempt  # ❌ This approach has problems
spec:
  replicas: 3
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "password"
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-data
        persistentVolumeClaim:
          claimName: mysql-pvc  # ❌ PROBLEM: All pods share same PVC!

# PROBLEMS with this approach:
# 1. Data Corruption: All 3 pods write to same disk
# 2. No Identity: Can't tell which pod is master vs slave
# 3. Random Names: mysql-7d4f8c9b5-xk2m9 (which one is master?)
# 4. Random Startup: All pods start simultaneously → race conditions
# 5. No Individual Storage: Can't give each pod its own PVC

---
# =================== THE STATEFULSET SOLUTION ===================

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-cluster
spec:
  serviceName: mysql-headless
  replicas: 3
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "password"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        command:
        - bash
        - -c
        - |
          # Pod identity determines role
          if [[ $POD_NAME == "mysql-0" ]]; then
            echo "I am the MASTER"
            # Master configuration
            mysql --user=root --password=password -e "
              CREATE USER IF NOT EXISTS 'repl'@'%' IDENTIFIED BY 'password';
              GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';
              FLUSH PRIVILEGES;
            "
          else
            echo "I am SLAVE, master is mysql-0"
            # Slave configuration
            mysql --user=root --password=password -e "
              CHANGE MASTER TO 
                MASTER_HOST='mysql-0.mysql-headless.default.svc.cluster.local',
                MASTER_USER='repl',
                MASTER_PASSWORD='password';
              START SLAVE;
            "
          fi
          # Keep container running
          tail -f /var/log/mysql/error.log
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
  # ✅ SOLUTION: Each pod gets its own PVC automatically
  volumeClaimTemplates:
  - metadata:
      name: mysql-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi

---
# Headless service for individual pod access
apiVersion: v1
kind: Service
metadata:
  name: mysql-headless
spec:
  clusterIP: None
  selector:
    app: mysql
  ports:
  - port: 3306

---
# =================== WHY DEPLOYMENT + PV DOESN'T WORK ===================

# Technical Limitation: Kubernetes doesn't support this in Deployments:
# volumes:
# - name: app-data
#   persistentVolumeClaim:
#     claimName: "app-data-{{ .Pod.Name }}"  # ❌ No templating support

# What StatefulSets provide that Deployments don't:
# 
# 1. INDIVIDUAL STORAGE per pod:
#    - mysql-0 gets mysql-data-mysql-0 PVC
#    - mysql-1 gets mysql-data-mysql-1 PVC  
#    - mysql-2 gets mysql-data-mysql-2 PVC
#
# 2. PREDICTABLE NAMES:
#    - Always mysql-0, mysql-1, mysql-2
#    - Not mysql-7d4f8c9b5-xk2m9 (random)
#
# 3. ORDERED STARTUP:
#    - mysql-0 starts first → becomes ready
#    - Then mysql-1 starts → connects to mysql-0
#    - Then mysql-2 starts → connects to mysql-0
#
# 4. STABLE NETWORK IDENTITY:
#    - mysql-0.mysql-headless.default.svc.cluster.local
#    - Slaves can always find master at predictable address
#
# 5. PERSISTENT IDENTITY across restarts:
#    - When mysql-0 dies, replacement is also mysql-0
#    - Gets same PVC, same DNS name, same role

# =================== WHEN YOU DON'T NEED STATEFULSETS ===================

# Use Deployment + External Storage for:
apiVersion: apps/v1
kind: Deployment  # ✅ Perfect for stateless apps
metadata:
  name: web-app
spec:
  replicas: 5
  template:
    spec:
      containers:
      - name: app
        image: myapp:v1
        env:
        - name: DATABASE_URL
          value: "postgresql://external-db:5432/myapp"  # External database
        - name: S3_BUCKET  
          value: "my-app-uploads"                        # External storage
        volumeMounts:
        - name: temp-storage
          mountPath: /tmp
      volumes:
      - name: temp-storage
        emptyDir: {}  # Ephemeral storage only

# ✅ Use Deployment when:
# - All pods are identical and interchangeable
# - Data stored externally (RDS, S3, Redis)
# - Pod identity doesn't matter
# - Horizontal scaling is simple

# ✅ Use StatefulSet when:
# - Each pod has unique role (master/slave)
# - Pods need persistent identity
# - Pods need individual storage
# - Startup/shutdown order matters
# - Examples: Databases, Kafka, Elasticsearch, Cassandra