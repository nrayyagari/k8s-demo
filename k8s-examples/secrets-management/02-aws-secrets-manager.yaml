# AWS Secrets Manager Integration
# Production-ready integration with AWS Secrets Manager

---
# Namespace for AWS Secrets Manager demo
apiVersion: v1
kind: Namespace
metadata:
  name: aws-secrets-demo
  labels:
    cloud-provider: aws
    secret-backend: aws-secrets-manager
    environment: production

---
# ServiceAccount for AWS authentication
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aws-secrets-sa
  namespace: aws-secrets-demo
  annotations:
    # IAM Role ARN for IRSA (IAM Roles for Service Accounts)
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/EKSSecretsManagerRole
  labels:
    aws-usage: secrets-manager-access

---
# ClusterSecretStore for AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: aws-secrets-manager
  labels:
    provider: aws
    service: secrets-manager
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        # Use IAM Roles for Service Accounts (IRSA)
        jwt:
          serviceAccountRef:
            name: aws-secrets-sa
            namespace: aws-secrets-demo

---
# Alternative SecretStore with explicit AWS credentials
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-with-credentials
  namespace: aws-secrets-demo
  annotations:
    description: "Alternative configuration using explicit AWS credentials"
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        secretRef:
          accessKeyId:
            name: aws-credentials
            key: access-key-id
          secretAccessKey:
            name: aws-credentials
            key: secret-access-key
          # Optional: Session token for temporary credentials
          sessionToken:
            name: aws-credentials
            key: session-token

---
# AWS credentials secret (for alternative method)
apiVersion: v1
kind: Secret
metadata:
  name: aws-credentials
  namespace: aws-secrets-demo
type: Opaque
stringData:
  access-key-id: "AKIAIOSFODNN7EXAMPLE"
  secret-access-key: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
  # session-token: "temporary-session-token-if-needed"

---
# ExternalSecret 1: Database credentials from AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: rds-database-credentials
  namespace: aws-secrets-demo
  labels:
    aws-secret: rds-production
    component: database
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: ClusterSecretStore
  target:
    name: rds-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        # Create database connection string
        DATABASE_URL: "postgresql://{{ .username }}:{{ .password }}@{{ .host }}:{{ .port }}/{{ .dbname }}"
        # Individual components
        DB_HOST: "{{ .host }}"
        DB_PORT: "{{ .port }}"
        DB_NAME: "{{ .dbname }}"
        DB_USER: "{{ .username }}"
        DB_PASSWORD: "{{ .password }}"
  data:
  - secretKey: username
    remoteRef:
      key: "prod/rds/myapp"  # Secret name in AWS Secrets Manager
      property: username      # JSON key within the secret
  - secretKey: password
    remoteRef:
      key: "prod/rds/myapp"
      property: password
  - secretKey: host
    remoteRef:
      key: "prod/rds/myapp"
      property: host
  - secretKey: port
    remoteRef:
      key: "prod/rds/myapp"
      property: port
  - secretKey: dbname
    remoteRef:
      key: "prod/rds/myapp"
      property: dbname

---
# ExternalSecret 2: API keys and service credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: external-api-keys
  namespace: aws-secrets-demo
  labels:
    aws-secret: api-integrations
    component: application
spec:
  refreshInterval: 30m
  secretStoreRef:
    name: aws-secrets-manager
    kind: ClusterSecretStore
  target:
    name: api-keys
    creationPolicy: Owner
  data:
  # Stripe payment processing
  - secretKey: stripe-publishable-key
    remoteRef:
      key: "prod/stripe"
      property: publishable_key
  - secretKey: stripe-secret-key
    remoteRef:
      key: "prod/stripe"
      property: secret_key
  # SendGrid email service
  - secretKey: sendgrid-api-key
    remoteRef:
      key: "prod/sendgrid"
      property: api_key
  # OAuth configuration
  - secretKey: oauth-client-id
    remoteRef:
      key: "prod/oauth/google"
      property: client_id
  - secretKey: oauth-client-secret
    remoteRef:
      key: "prod/oauth/google"
      property: client_secret

---
# ExternalSecret 3: SSL/TLS certificates from AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: tls-certificates
  namespace: aws-secrets-demo
  labels:
    aws-secret: ssl-certificates
    component: ingress
spec:
  refreshInterval: 24h  # Certificates don't change often
  secretStoreRef:
    name: aws-secrets-manager
    kind: ClusterSecretStore
  target:
    name: app-tls-cert
    creationPolicy: Owner
    type: kubernetes.io/tls
  data:
  - secretKey: tls.crt
    remoteRef:
      key: "prod/ssl/app.company.com"
      property: certificate
  - secretKey: tls.key
    remoteRef:
      key: "prod/ssl/app.company.com"
      property: private_key

---
# ExternalSecret 4: Entire AWS secret as single value
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: complete-aws-secret
  namespace: aws-secrets-demo
  labels:
    aws-secret: application-config
    type: complete-json
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: aws-secrets-manager
    kind: ClusterSecretStore
  target:
    name: app-config-json
    creationPolicy: Owner
  dataFrom:
  # Import entire secret as JSON
  - extract:
      key: "prod/app/configuration"

---
# Production Application using AWS secrets
apiVersion: apps/v1
kind: Deployment
metadata:
  name: production-app
  namespace: aws-secrets-demo
  labels:
    app: production-app
    environment: production
spec:
  replicas: 3
  selector:
    matchLabels:
      app: production-app
  template:
    metadata:
      labels:
        app: production-app
    spec:
      serviceAccountName: aws-secrets-sa
      containers:
      - name: app
        image: nginx:1.27
        ports:
        - containerPort: 80
        - containerPort: 443
        env:
        # Database connection
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: rds-credentials
              key: DATABASE_URL
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: rds-credentials
              key: DB_HOST
        # API keys
        - name: STRIPE_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: stripe-secret-key
        - name: SENDGRID_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: sendgrid-api-key
        volumeMounts:
        # Mount TLS certificates
        - name: tls-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        # Mount complete configuration
        - name: app-config
          mountPath: /etc/app-config
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: tls-certs
        secret:
          secretName: app-tls-cert
      - name: app-config
        secret:
          secretName: app-config-json

---
# Service with TLS termination
apiVersion: v1
kind: Service
metadata:
  name: production-app-service
  namespace: aws-secrets-demo
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-west-2:123456789012:certificate/12345678-1234-1234-1234-123456789012"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "https"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
spec:
  selector:
    app: production-app
  ports:
  - port: 443
    targetPort: 443
    name: https
  - port: 80
    targetPort: 80
    name: http
  type: LoadBalancer

---
# Test pod for debugging AWS secrets
apiVersion: v1
kind: Pod
metadata:
  name: aws-secrets-debug
  namespace: aws-secrets-demo
  labels:
    role: debugging
spec:
  serviceAccountName: aws-secrets-sa
  containers:
  - name: debug
    image: amazon/aws-cli:latest
    command: ["sleep", "3600"]
    env:
    - name: AWS_REGION
      value: us-west-2
    volumeMounts:
    - name: rds-creds
      mountPath: /secrets/rds
      readOnly: true
    - name: api-keys
      mountPath: /secrets/api
      readOnly: true
    - name: tls-certs
      mountPath: /secrets/tls
      readOnly: true
  volumes:
  - name: rds-creds
    secret:
      secretName: rds-credentials
  - name: api-keys
    secret:
      secretName: api-keys
  - name: tls-certs
    secret:
      secretName: app-tls-cert

# AWS SECRETS MANAGER SETUP REQUIREMENTS:
#
# 1. IAM Role for EKS Service Account (IRSA):
# {
#   "Version": "2012-10-17",
#   "Statement": [
#     {
#       "Effect": "Allow",
#       "Action": [
#         "secretsmanager:GetSecretValue",
#         "secretsmanager:DescribeSecret"
#       ],
#       "Resource": [
#         "arn:aws:secretsmanager:us-west-2:123456789012:secret:prod/*"
#       ]
#     }
#   ]
# }
#
# 2. Trust relationship for the role:
# {
#   "Version": "2012-10-17",
#   "Statement": [
#     {
#       "Effect": "Allow",
#       "Principal": {
#         "Federated": "arn:aws:iam::123456789012:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/EXAMPLED539D4633E53DE1B716D3041E"
#       },
#       "Action": "sts:AssumeRoleWithWebIdentity",
#       "Condition": {
#         "StringEquals": {
#           "oidc.eks.us-west-2.amazonaws.com/id/EXAMPLED539D4633E53DE1B716D3041E:sub": "system:serviceaccount:aws-secrets-demo:aws-secrets-sa"
#         }
#       }
#     }
#   ]
# }
#
# 3. AWS Secrets Manager secrets structure:
# Secret: prod/rds/myapp
# {
#   "username": "app_user",
#   "password": "secure_password_123",
#   "host": "myapp-db.cluster-xyz.us-west-2.rds.amazonaws.com",
#   "port": "5432",
#   "dbname": "production_app"
# }

# TESTING COMMANDS:
#
# 1. Create AWS secrets (using AWS CLI):
# aws secretsmanager create-secret --name "prod/rds/myapp" --description "RDS credentials for production app" --secret-string '{"username":"app_user","password":"secure_password_123","host":"myapp-db.cluster-xyz.us-west-2.rds.amazonaws.com","port":"5432","dbname":"production_app"}'
# aws secretsmanager create-secret --name "prod/stripe" --secret-string '{"publishable_key":"pk_live_123","secret_key":"sk_live_456"}'
# aws secretsmanager create-secret --name "prod/sendgrid" --secret-string '{"api_key":"SG.123.456"}'
#
# 2. Deploy AWS secrets integration:
# kubectl apply -f 02-aws-secrets-manager.yaml
#
# 3. Check ExternalSecret status:
# kubectl get externalsecret -n aws-secrets-demo
# kubectl describe externalsecret rds-database-credentials -n aws-secrets-demo
#
# 4. Verify secrets were created from AWS:
# kubectl get secrets -n aws-secrets-demo
# kubectl get secret rds-credentials -n aws-secrets-demo -o yaml
#
# 5. Test AWS credentials and access:
# kubectl exec -it aws-secrets-debug -n aws-secrets-demo -- aws secretsmanager get-secret-value --secret-id "prod/rds/myapp" --region us-west-2
# kubectl exec -it aws-secrets-debug -n aws-secrets-demo -- aws sts get-caller-identity
#
# 6. Examine synced secrets:
# kubectl exec -it aws-secrets-debug -n aws-secrets-demo -- cat /secrets/rds/DATABASE_URL
# kubectl exec -it aws-secrets-debug -n aws-secrets-demo -- cat /secrets/api/stripe-secret-key
#
# 7. Test secret refresh from AWS:
# aws secretsmanager update-secret --secret-id "prod/rds/myapp" --secret-string '{"username":"app_user","password":"updated_password_456","host":"myapp-db.cluster-xyz.us-west-2.rds.amazonaws.com","port":"5432","dbname":"production_app"}'
# # Wait for refresh interval and check:
# kubectl get secret rds-credentials -n aws-secrets-demo -o jsonpath='{.data.DB_PASSWORD}' | base64 -d
#
# 8. Check application environment variables:
# kubectl exec -it $(kubectl get pod -l app=production-app -n aws-secrets-demo -o jsonpath='{.items[0].metadata.name}') -n aws-secrets-demo -- env | grep -E "(DATABASE_URL|STRIPE|SENDGRID)"
#
# 9. Monitor External Secrets Operator logs:
# kubectl logs -n external-secrets-system -l app.kubernetes.io/name=external-secrets | grep aws-secrets-demo
#
# 10. Clean up AWS secrets:
# aws secretsmanager delete-secret --secret-id "prod/rds/myapp" --force-delete-without-recovery
# aws secretsmanager delete-secret --secret-id "prod/stripe" --force-delete-without-recovery
# aws secretsmanager delete-secret --secret-id "prod/sendgrid" --force-delete-without-recovery