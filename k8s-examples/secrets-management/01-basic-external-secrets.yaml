# Basic External Secrets Setup - Understanding Core Components
# Demonstrates fundamental External Secrets Operator concepts

---
# Namespace for basic external secrets learning
apiVersion: v1
kind: Namespace
metadata:
  name: basic-external-secrets
  labels:
    learning-topic: external-secrets-basics
    security-level: demo

---
# Mock external secret store using ConfigMap (simulates Vault/AWS)
apiVersion: v1
kind: ConfigMap
metadata:
  name: simulated-vault
  namespace: basic-external-secrets
  labels:
    type: mock-secret-store
data:
  # Application secrets
  app-db-password: "prod-db-secret-2024"
  app-db-username: "app_user_prod"
  app-db-host: "db.production.company.com"
  app-db-port: "5432"
  app-db-name: "production_app"
  
  # API integration secrets
  stripe-api-key: "sk_live_51234567890"
  sendgrid-api-key: "SG.1234567890.abcdefghijklmnop"
  jwt-signing-key: "super-secret-jwt-key-2024"
  
  # SSL/TLS certificates (base64 encoded for demo)
  tls-certificate: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t"
  tls-private-key: "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t"

---
# ServiceAccount for External Secrets Operator
apiVersion: v1
kind: ServiceAccount
metadata:
  name: basic-external-secrets
  namespace: basic-external-secrets

---
# Role for accessing ConfigMaps (simulating secret store access)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: configmap-reader
  namespace: basic-external-secrets
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]

---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: configmap-reader-binding
  namespace: basic-external-secrets
subjects:
- kind: ServiceAccount
  name: basic-external-secrets
  namespace: basic-external-secrets
roleRef:
  kind: Role
  name: configmap-reader
  apiGroup: rbac.authorization.k8s.io

---
# SecretStore - Basic Configuration
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: basic-secret-store
  namespace: basic-external-secrets
  annotations:
    description: "Basic SecretStore using Kubernetes provider for learning"
spec:
  provider:
    kubernetes:
      # Configuration for accessing Kubernetes resources as external secrets
      remoteNamespace: basic-external-secrets
      server:
        caProvider:
          type: ConfigMap
          name: kube-root-ca.crt
          key: ca.crt
      auth:
        serviceAccount:
          name: basic-external-secrets

---
# ExternalSecret 1: Simple key-value mapping
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: basic-database-secret
  namespace: basic-external-secrets
  labels:
    component: database
    environment: production
spec:
  # Refresh every 2 minutes for demo purposes
  refreshInterval: 2m
  
  # Reference to our SecretStore
  secretStoreRef:
    name: basic-secret-store
    kind: SecretStore
  
  # Target Kubernetes Secret
  target:
    name: database-credentials
    creationPolicy: Owner
    type: Opaque
  
  # Simple 1:1 mapping of external secret to Kubernetes secret
  data:
  - secretKey: username
    remoteRef:
      key: simulated-vault
      property: app-db-username
  - secretKey: password
    remoteRef:
      key: simulated-vault
      property: app-db-password
  - secretKey: host
    remoteRef:
      key: simulated-vault
      property: app-db-host
  - secretKey: port
    remoteRef:
      key: simulated-vault
      property: app-db-port
  - secretKey: database
    remoteRef:
      key: simulated-vault
      property: app-db-name

---
# ExternalSecret 2: Template transformation
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: templated-config-secret
  namespace: basic-external-secrets
  labels:
    component: application
    type: configuration
spec:
  refreshInterval: 5m
  secretStoreRef:
    name: basic-secret-store
    kind: SecretStore
  target:
    name: app-configuration
    creationPolicy: Owner
    # Use template to create composite configuration
    template:
      type: Opaque
      data:
        # Create a database connection string
        DATABASE_URL: "postgresql://{{ .username }}:{{ .password }}@{{ .host }}:{{ .port }}/{{ .database }}"
        
        # Create application config file
        app-config.yaml: |
          database:
            host: "{{ .host }}"
            port: {{ .port }}
            database: "{{ .database }}"
            username: "{{ .username }}"
            password: "{{ .password }}"
          api:
            stripe_key: "{{ .stripe_key }}"
            sendgrid_key: "{{ .sendgrid_key }}"
          security:
            jwt_secret: "{{ .jwt_secret }}"
            
        # Create environment file
        .env: |
          DATABASE_URL=postgresql://{{ .username }}:{{ .password }}@{{ .host }}:{{ .port }}/{{ .database }}
          STRIPE_API_KEY={{ .stripe_key }}
          SENDGRID_API_KEY={{ .sendgrid_key }}
          JWT_SIGNING_KEY={{ .jwt_secret }}
  
  # Data to extract and make available to template
  data:
  - secretKey: username
    remoteRef:
      key: simulated-vault
      property: app-db-username
  - secretKey: password
    remoteRef:
      key: simulated-vault
      property: app-db-password
  - secretKey: host
    remoteRef:
      key: simulated-vault
      property: app-db-host
  - secretKey: port
    remoteRef:
      key: simulated-vault
      property: app-db-port
  - secretKey: database
    remoteRef:
      key: simulated-vault
      property: app-db-name
  - secretKey: stripe_key
    remoteRef:
      key: simulated-vault
      property: stripe-api-key
  - secretKey: sendgrid_key
    remoteRef:
      key: simulated-vault
      property: sendgrid-api-key
  - secretKey: jwt_secret
    remoteRef:
      key: simulated-vault
      property: jwt-signing-key

---
# ExternalSecret 3: TLS Certificate
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: tls-certificate-secret
  namespace: basic-external-secrets
  labels:
    component: ingress
    type: tls
spec:
  refreshInterval: 24h  # Certificates change less frequently
  secretStoreRef:
    name: basic-secret-store
    kind: SecretStore
  target:
    name: app-tls-certificate
    creationPolicy: Owner
    type: kubernetes.io/tls  # Special type for TLS certificates
  data:
  - secretKey: tls.crt
    remoteRef:
      key: simulated-vault
      property: tls-certificate
  - secretKey: tls.key
    remoteRef:
      key: simulated-vault
      property: tls-private-key

---
# Application Deployment using external secrets
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-app
  namespace: basic-external-secrets
  labels:
    app: example-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: example-app
  template:
    metadata:
      labels:
        app: example-app
    spec:
      containers:
      - name: app
        image: nginx:1.27
        ports:
        - containerPort: 80
        # Use secrets as environment variables
        env:
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: password
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: app-configuration
              key: DATABASE_URL
        # Mount configuration files
        volumeMounts:
        - name: app-config
          mountPath: /etc/app-config
          readOnly: true
        - name: tls-certs
          mountPath: /etc/ssl/certs
          readOnly: true
      volumes:
      - name: app-config
        secret:
          secretName: app-configuration
      - name: tls-certs
        secret:
          secretName: app-tls-certificate

---
# Service for the application
apiVersion: v1
kind: Service
metadata:
  name: example-app-service
  namespace: basic-external-secrets
spec:
  selector:
    app: example-app
  ports:
  - port: 80
    targetPort: 80

---
# Test pod to examine the secrets
apiVersion: v1
kind: Pod
metadata:
  name: secret-inspector
  namespace: basic-external-secrets
  labels:
    role: debugging
spec:
  containers:
  - name: inspector
    image: busybox:1.36
    command: ["sleep", "3600"]
    # Mount all secrets for inspection
    volumeMounts:
    - name: db-creds
      mountPath: /secrets/database
      readOnly: true
    - name: app-config
      mountPath: /secrets/config
      readOnly: true
    - name: tls-certs
      mountPath: /secrets/tls
      readOnly: true
  volumes:
  - name: db-creds
    secret:
      secretName: database-credentials
  - name: app-config
    secret:
      secretName: app-configuration
  - name: tls-certs
    secret:
      secretName: app-tls-certificate

# EXTERNAL SECRETS OPERATOR WORKFLOW:
#
# 1. External Secrets Operator watches ExternalSecret resources
# 2. For each ExternalSecret:
#    a. Connects to external store using SecretStore configuration
#    b. Fetches specified secrets from external store
#    c. Applies optional template transformations
#    d. Creates/updates target Kubernetes Secret
# 3. Repeats on refreshInterval to keep secrets in sync
#
# KEY CONCEPTS DEMONSTRATED:
#
# 1. SecretStore: Configuration for accessing external secret management system
# 2. ExternalSecret: Specification of what secrets to sync and how
# 3. Target Secret: The resulting Kubernetes Secret created by ESO
# 4. Template: Transform and combine external secrets into desired format
# 5. Refresh Interval: How often to sync secrets from external store

# COMPARISON WITH DIFFERENT SECRET TYPES:
#
# Basic Mapping (database-credentials):
# - Simple 1:1 mapping from external store to Kubernetes secret
# - Direct property access
# - No transformation
#
# Templated Configuration (app-configuration):
# - Combines multiple external secrets
# - Creates composite values (DATABASE_URL)
# - Generates configuration files
#
# TLS Certificate (app-tls-certificate):
# - Uses special kubernetes.io/tls type
# - Maps to standard TLS secret format
# - Can be used directly with Ingress

# TESTING COMMANDS:
#
# 1. Deploy basic external secrets:
# kubectl apply -f 01-basic-external-secrets.yaml
#
# 2. Check ExternalSecret status:
# kubectl get externalsecret -n basic-external-secrets
# kubectl describe externalsecret basic-database-secret -n basic-external-secrets
#
# 3. Verify secrets were created:
# kubectl get secrets -n basic-external-secrets
#
# 4. Examine secret contents:
# kubectl get secret database-credentials -n basic-external-secrets -o yaml
# kubectl get secret app-configuration -n basic-external-secrets -o yaml
# kubectl get secret app-tls-certificate -n basic-external-secrets -o yaml
#
# 5. View generated configuration files:
# kubectl exec -it secret-inspector -n basic-external-secrets -- cat /secrets/config/app-config.yaml
# kubectl exec -it secret-inspector -n basic-external-secrets -- cat /secrets/config/.env
# kubectl exec -it secret-inspector -n basic-external-secrets -- cat /secrets/config/DATABASE_URL
#
# 6. Check database credentials:
# kubectl exec -it secret-inspector -n basic-external-secrets -- ls -la /secrets/database/
# kubectl exec -it secret-inspector -n basic-external-secrets -- cat /secrets/database/username
# kubectl exec -it secret-inspector -n basic-external-secrets -- cat /secrets/database/password
#
# 7. Test secret refresh by updating mock store:
# kubectl patch configmap simulated-vault -n basic-external-secrets -p '{"data":{"app-db-password":"updated-password-2024"}}'
# # Wait for refresh interval (2m) and check:
# kubectl get secret database-credentials -n basic-external-secrets -o jsonpath='{.data.password}' | base64 -d
#
# 8. Check application environment variables:
# kubectl exec -it $(kubectl get pod -l app=example-app -n basic-external-secrets -o jsonpath='{.items[0].metadata.name}') -n basic-external-secrets -- env | grep DB_
#
# 9. View ExternalSecret events:
# kubectl get events -n basic-external-secrets --field-selector involvedObject.kind=ExternalSecret
#
# 10. Check External Secrets Operator logs:
# kubectl logs -n external-secrets-system -l app.kubernetes.io/name=external-secrets