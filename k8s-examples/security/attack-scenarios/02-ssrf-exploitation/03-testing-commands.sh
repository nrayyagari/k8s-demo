#!/bin/bash
# SSRF Attack and Defense Testing Commands
# Run these commands to understand SSRF vulnerabilities and test defenses

set -e

echo "üîí SSRF Attack and Defense Testing Suite"
echo "========================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check prerequisites
echo -e "${BLUE}üìã Checking prerequisites...${NC}"
if ! command_exists kubectl; then
    echo -e "${RED}‚ùå kubectl not found. Please install kubectl first.${NC}"
    exit 1
fi

if ! command_exists curl; then
    echo -e "${RED}‚ùå curl not found. Please install curl first.${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Prerequisites check passed${NC}"
echo

# Deploy vulnerable application
echo -e "${YELLOW}üöÄ Deploying vulnerable SSRF application for testing...${NC}"
kubectl apply -f 01-vulnerable-app.yaml

echo "‚è≥ Waiting for vulnerable app to be ready..."
kubectl wait --for=condition=available --timeout=300s deployment/vulnerable-ssrf-app -n security-demo
kubectl wait --for=condition=available --timeout=300s deployment/admin-api -n security-demo

# Get service endpoint
VULNERABLE_APP_IP=$(kubectl get service vulnerable-ssrf-service -n security-demo -o jsonpath='{.spec.clusterIP}')
echo -e "${GREEN}‚úÖ Vulnerable app deployed at: http://${VULNERABLE_APP_IP}${NC}"

echo
echo -e "${RED}‚ö†Ô∏è  SSRF ATTACK DEMONSTRATIONS${NC}"
echo "=================================="

# Function to test SSRF attack
test_ssrf_attack() {
    local attack_name="$1"
    local target_url="$2"
    local description="$3"
    
    echo -e "${YELLOW}üéØ Testing: $attack_name${NC}"
    echo "Description: $description"
    echo "Target URL: $target_url"
    
    # Create a temporary pod to test from inside the cluster
    kubectl run ssrf-test-pod --image=curlimages/curl:latest --rm -i --tty --restart=Never -- \
        curl -s "http://${VULNERABLE_APP_IP}/fetch?url=${target_url}" | jq . 2>/dev/null || echo "Request completed (may have failed)"
    echo
}

# Test 1: AWS Metadata API Attack
test_ssrf_attack \
    "AWS Metadata API Access" \
    "http://169.254.169.254/latest/meta-data/" \
    "Attempt to access AWS EC2 instance metadata service"

# Test 2: Kubernetes API Discovery  
test_ssrf_attack \
    "Kubernetes API Discovery" \
    "https://kubernetes.default.svc.cluster.local/" \
    "Attempt to access Kubernetes API server"

# Test 3: Internal Service Enumeration
test_ssrf_attack \
    "Internal Admin API Access" \
    "http://admin-api.security-demo.svc.cluster.local:8080/" \
    "Access internal admin API that should not be externally accessible"

# Test 4: Internal Service Health Check
test_ssrf_attack \
    "Internal Service Health Check" \
    "http://admin-api.security-demo.svc.cluster.local:8080/health" \
    "Extract sensitive information from internal health endpoints"

echo -e "${GREEN}üõ°Ô∏è  DEPLOYING SECURE APPLICATION WITH DEFENSES${NC}"
echo "================================================"

# Deploy secure application
kubectl apply -f 02-ssrf-defenses.yaml

echo "‚è≥ Waiting for secure app to be ready..."
kubectl wait --for=condition=available --timeout=300s deployment/secure-app -n secure-app

SECURE_APP_IP=$(kubectl get service secure-app-service -n secure-app -o jsonpath='{.spec.clusterIP}')
echo -e "${GREEN}‚úÖ Secure app deployed at: http://${SECURE_APP_IP}${NC}"

echo
echo -e "${GREEN}üß™ TESTING SSRF DEFENSES${NC}"
echo "========================="

# Function to test secure app
test_secure_app() {
    local test_name="$1"
    local target_url="$2"
    local expected_result="$3"
    
    echo -e "${BLUE}üî¨ Testing: $test_name${NC}"
    echo "Target URL: $target_url"
    echo "Expected: $expected_result"
    
    kubectl run secure-test-pod --image=curlimages/curl:latest --rm -i --tty --restart=Never -- \
        curl -s "http://${SECURE_APP_IP}/fetch?url=${target_url}" | jq . 2>/dev/null || echo "Request completed"
    echo
}

# Test secure app against various attacks
test_secure_app \
    "Blocked Metadata API" \
    "http://169.254.169.254/latest/meta-data/" \
    "Should be blocked by allowlist validation"

test_secure_app \
    "Blocked Internal Network" \
    "http://10.0.0.1/" \
    "Should be blocked as internal IP range"

test_secure_app \
    "Blocked Kubernetes API" \
    "https://kubernetes.default.svc.cluster.local/" \
    "Should be blocked by allowlist validation"

test_secure_app \
    "Allowed External API" \
    "https://api.github.com" \
    "Should be allowed as it's in the allowlist"

test_secure_app \
    "Blocked Localhost" \
    "http://127.0.0.1/" \
    "Should be blocked as localhost"

echo -e "${BLUE}üìä NETWORK POLICY VERIFICATION${NC}"
echo "==============================="

echo "üìã Network policies in secure-app namespace:"
kubectl get networkpolicies -n secure-app

echo
echo "üìã Checking pod egress connectivity:"
kubectl run network-test --image=nicolaka/netshoot --rm -i --tty --restart=Never -n secure-app -- nslookup kubernetes.default.svc.cluster.local

echo
echo -e "${BLUE}üîç SECURITY MONITORING${NC}"
echo "======================"

# Check for any security violations
echo "üìã Checking for denied network connections:"
kubectl logs -n secure-app -l app=secure-app --tail=50 | grep -i "denied\|blocked\|error" || echo "No security violations found in app logs"

echo
echo -e "${BLUE}üßπ CLEANUP COMMANDS${NC}"
echo "=================="
echo "To remove test resources:"
echo "kubectl delete namespace security-demo"
echo "kubectl delete namespace secure-app"

echo
echo -e "${GREEN}‚úÖ SSRF Testing Complete!${NC}"
echo
echo -e "${YELLOW}üìö Key Learnings:${NC}"
echo "1. Vulnerable app allows access to internal services and metadata APIs"
echo "2. Secure app blocks dangerous requests with input validation"
echo "3. Network policies provide additional defense-in-depth"
echo "4. Proper security context prevents privilege escalation"
echo "5. Monitoring helps detect and respond to attacks"
echo
echo -e "${RED}‚ö†Ô∏è  Remember: These examples are for educational purposes only!${NC}"
echo "Never deploy vulnerable applications in production environments."

# Optional: Show how to test with port forwarding
echo
echo -e "${BLUE}üí° Optional: Test via Port Forwarding${NC}"
echo "========================================"
echo "To test from your local machine:"
echo "kubectl port-forward -n security-demo svc/vulnerable-ssrf-service 8080:80"
echo "Then visit: http://localhost:8080"
echo
echo "For secure app:"
echo "kubectl port-forward -n secure-app svc/secure-app-service 8081:80"
echo "Then visit: http://localhost:8081"