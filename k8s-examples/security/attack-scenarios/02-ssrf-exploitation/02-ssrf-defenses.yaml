# SSRF Defense: Secure Application with Network Policies and Input Validation

apiVersion: v1
kind: Namespace
metadata:
  name: secure-app
  labels:
    security-hardened: "true"
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
---
# Secure application with SSRF protection
apiVersion: v1
kind: ConfigMap
metadata:
  name: secure-app-config
  namespace: secure-app
data:
  app.py: |
    from flask import Flask, request, jsonify
    import requests
    import ipaddress
    import re
    import json
    import os
    from urllib.parse import urlparse
    
    app = Flask(__name__)
    
    # Load allowed hosts configuration
    with open('/config/allowed-hosts.json', 'r') as f:
        config = json.load(f)
        ALLOWED_HOSTS = config['allowedHosts']
        BLOCKED_CIDRS = [ipaddress.ip_network(cidr) for cidr in config['blockedCIDRs']]
    
    def is_safe_url(url):
        """Validate URL to prevent SSRF attacks"""
        try:
            parsed = urlparse(url)
            
            # Only allow HTTP and HTTPS
            if parsed.scheme not in ['http', 'https']:
                return False, "Only HTTP and HTTPS schemes allowed"
            
            # Check against allowlist
            if parsed.hostname not in ALLOWED_HOSTS:
                return False, f"Host {parsed.hostname} not in allowlist"
            
            # Resolve hostname to IP and check against blocked ranges
            try:
                import socket
                ip = socket.gethostbyname(parsed.hostname)
                ip_obj = ipaddress.ip_address(ip)
                
                for blocked_cidr in BLOCKED_CIDRS:
                    if ip_obj in blocked_cidr:
                        return False, f"IP {ip} is in blocked range {blocked_cidr}"
                        
            except socket.gaierror:
                return False, "Cannot resolve hostname"
            
            return True, "URL is safe"
            
        except Exception as e:
            return False, f"URL validation error: {str(e)}"
    
    @app.route('/')
    def home():
        return '''
        <h1>Secure Application with SSRF Protection</h1>
        <p>This application implements comprehensive SSRF defenses.</p>
        <form action="/fetch" method="get">
            <label>Enter URL to fetch (must be in allowlist):</label>
            <input type="text" name="url" placeholder="https://api.github.com" style="width: 400px;">
            <input type="submit" value="Fetch">
        </form>
        <h3>Allowed Hosts:</h3>
        <ul>
            <li>api.github.com</li>
            <li>httpbin.org</li>
            <li>jsonplaceholder.typicode.com</li>
        </ul>
        <h3>Blocked Attacks:</h3>
        <ul>
            <li>❌ Metadata APIs (169.254.169.254)</li>
            <li>❌ Internal networks (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16)</li>
            <li>❌ Localhost (127.0.0.0/8)</li>
            <li>❌ Kubernetes API</li>
        </ul>
        '''
    
    @app.route('/fetch')
    def fetch_url():
        url = request.args.get('url')
        if not url:
            return jsonify({'error': 'No URL provided'}), 400
        
        # SECURITY: Validate URL before making request
        is_safe, message = is_safe_url(url)
        if not is_safe:
            return jsonify({'error': f'SSRF protection: {message}'}), 403
        
        try:
            # Make request with restrictions
            response = requests.get(
                url, 
                timeout=5,  # Shorter timeout
                allow_redirects=False,  # Prevent redirect-based SSRF
                verify=True  # Verify SSL certificates
            )
            return jsonify({
                'url': url,
                'status_code': response.status_code,
                'headers': dict(response.headers),
                'content': response.text[:500]  # Limit content
            })
        except Exception as e:
            return jsonify({'error': f'Request failed: {str(e)}'}), 500
    
    @app.route('/health')
    def health():
        return jsonify({'status': 'healthy', 'security': 'enabled'})
    
    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=5000)
  
  requirements.txt: |
    Flask==2.3.3
    requests==2.31.0
    
  allowed-hosts.json: |
    {
      "allowedHosts": [
        "api.github.com",
        "httpbin.org", 
        "jsonplaceholder.typicode.com"
      ],
      "blockedCIDRs": [
        "10.0.0.0/8",
        "172.16.0.0/12",
        "192.168.0.0/16", 
        "169.254.169.254/32",
        "127.0.0.0/8",
        "::1/128",
        "fc00::/7"
      ]
    }
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secure-app-sa
  namespace: secure-app
automountServiceAccountToken: false  # Disable if not needed
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secure-app-role
  namespace: secure-app
rules: []  # No permissions needed for this app
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secure-app-binding
  namespace: secure-app
subjects:
- kind: ServiceAccount
  name: secure-app-sa
  namespace: secure-app
roleRef:
  kind: Role
  name: secure-app-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: secure-app
  namespace: secure-app
  labels:
    app: secure-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: secure-app
  template:
    metadata:
      labels:
        app: secure-app
    spec:
      serviceAccountName: secure-app-sa
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 3000
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: app
        image: python:3.9-slim
        command: ["/bin/bash"]
        args:
        - -c
        - |
          pip install -r /app/requirements.txt
          python /app/app.py
        ports:
        - containerPort: 5000
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        volumeMounts:
        - name: app-code
          mountPath: /app
          readOnly: true
        - name: config
          mountPath: /config
          readOnly: true
        - name: tmp
          mountPath: /tmp
        env:
        - name: FLASK_ENV
          value: "production"
        - name: PYTHONPATH
          value: "/app"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: app-code
        configMap:
          name: secure-app-config
          items:
          - key: app.py
            path: app.py
          - key: requirements.txt
            path: requirements.txt
      - name: config
        configMap:
          name: secure-app-config
          items:
          - key: allowed-hosts.json
            path: allowed-hosts.json
      - name: tmp
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: secure-app-service
  namespace: secure-app
spec:
  selector:
    app: secure-app
  ports:
  - port: 80
    targetPort: 5000
  type: ClusterIP
---
# Network Policy: Strict egress control to prevent SSRF
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: secure-app-egress
  namespace: secure-app
spec:
  podSelector:
    matchLabels:
      app: secure-app
  policyTypes:
  - Egress
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow HTTPS to external allowed hosts only
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
  # Block internal cluster communication
  # (Specific allows can be added as needed)
---
# Network Policy: Block metadata API access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: block-metadata-api
  namespace: secure-app
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  # Allow all except metadata APIs
  - to:
    - podSelector: {}
  - to:
    - namespaceSelector: {}
  # Explicitly block known metadata endpoints
  # Note: This is a defense-in-depth measure; the application should validate URLs
  - to: []
    ports:
    - protocol: TCP
      port: 80
    # Additional CNI-specific rules may be needed for complete blocking
---
# Network Policy: Default deny all ingress (except explicitly allowed)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-ingress
  namespace: secure-app
spec:
  podSelector: {}
  policyTypes:
  - Ingress
---
# Network Policy: Allow ingress to secure app from specific sources
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-to-secure-app
  namespace: secure-app
spec:
  podSelector:
    matchLabels:
      app: secure-app
  policyTypes:
  - Ingress
  ingress:
  # Allow ingress from ingress controller (adjust selector as needed)
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  # Allow health checks from monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 5000