# Secure Container Build Alternatives - Production Ready Configurations

apiVersion: v1
kind: Namespace
metadata:
  name: secure-builds
  labels:
    security-level: "high"
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted  
    pod-security.kubernetes.io/warn: restricted
---
# Option 1: Kaniko - Secure container image builds without Docker daemon
apiVersion: v1
kind: ConfigMap
metadata:
  name: kaniko-build-config
  namespace: secure-builds
data:
  Dockerfile: |
    FROM alpine:3.18
    RUN apk add --no-cache curl ca-certificates
    COPY app /usr/local/bin/app
    RUN chmod +x /usr/local/bin/app
    USER 1001
    EXPOSE 8080
    ENTRYPOINT ["/usr/local/bin/app"]
  app: |
    #!/bin/sh
    echo "Hello from secure container build!"
    exec httpd -f -p 8080
---
apiVersion: batch/v1
kind: Job
metadata:
  name: kaniko-secure-build
  namespace: secure-builds
spec:
  template:
    metadata:
      labels:
        app: kaniko-builder
    spec:
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: kaniko-sa
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:v1.9.0
        args:
        - "--context=dir:///workspace"
        - "--dockerfile=/workspace/Dockerfile"
        - "--destination=ttl.sh/secure-app:$(date +%s)"
        - "--cache=true"
        - "--cache-ttl=24h"
        - "--skip-tls-verify"  # Only for demo registry
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: build-context
          mountPath: /workspace
        - name: kaniko-cache
          mountPath: /cache
        - name: tmp
          mountPath: /tmp
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: ""  # No credentials needed for demo
      volumes:
      - name: build-context
        configMap:
          name: kaniko-build-config
      - name: kaniko-cache
        emptyDir:
          sizeLimit: 1Gi
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
---
# Option 2: Buildah with Podman - Rootless container builds
apiVersion: v1
kind: ConfigMap
metadata:
  name: buildah-config
  namespace: secure-builds
data:
  containers.conf: |
    [containers]
    netns="host"
    userns="host"
    ipcns="host"
    utsns="host"
    cgroupns="host"
    log_driver = "k8s-file"
    [engine]
    cgroup_manager = "systemd"
    events_logger="file"
    runtime="crun"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: buildah-secure-build
  namespace: secure-builds
spec:
  template:
    spec:
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: buildah-sa
      containers:
      - name: buildah
        image: quay.io/buildah/stable:v1.32
        command: ["/bin/bash"]
        args:
        - -c
        - |
          set -e
          echo "Building container image with Buildah..."
          
          # Create a new container from base image
          container=$(buildah from alpine:3.18)
          
          # Install dependencies
          buildah run $container -- apk add --no-cache curl ca-certificates
          
          # Add application files
          echo '#!/bin/sh\necho "Secure build success!"\nwhile true; do sleep 30; done' > /tmp/app
          buildah copy $container /tmp/app /usr/local/bin/app
          buildah run $container -- chmod +x /usr/local/bin/app
          
          # Configure container
          buildah config --user 1001 $container
          buildah config --port 8080 $container  
          buildah config --entrypoint '["/usr/local/bin/app"]' $container
          
          # Commit the image
          buildah commit $container secure-app:latest
          
          echo "Build completed successfully!"
          buildah images
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
            add:
            - SETUID
            - SETGID
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: buildah-storage
          mountPath: /var/lib/containers
        - name: tmp
          mountPath: /tmp
        - name: containers-conf
          mountPath: /etc/containers/containers.conf
          subPath: containers.conf
      volumes:
      - name: buildah-storage
        emptyDir:
          sizeLimit: 2Gi
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: containers-conf
        configMap:
          name: buildah-config
---
# Option 3: Cloud Build Integration (for cloud environments)
apiVersion: batch/v1
kind: Job
metadata:
  name: cloud-build-trigger
  namespace: secure-builds
spec:
  template:
    spec:
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      serviceAccountName: cloud-build-sa
      containers:
      - name: cloud-build
        image: google/cloud-sdk:alpine
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Triggering secure cloud build..."
          # In real implementation, this would trigger cloud build service
          # gcloud builds submit --config=cloudbuild.yaml .
          echo "Cloud build would be triggered here"
          echo "No local Docker daemon required"
          echo "Build runs in isolated cloud environment"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: gcp-credentials
          mountPath: /var/secrets/google
          readOnly: true
        - name: tmp
          mountPath: /tmp
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /var/secrets/google/key.json
      volumes:
      - name: gcp-credentials
        secret:
          secretName: gcp-service-account-key
          optional: true
      - name: tmp
        emptyDir: {}
---
# Service Accounts with minimal permissions
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kaniko-sa
  namespace: secure-builds
automountServiceAccountToken: false
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: buildah-sa
  namespace: secure-builds
automountServiceAccountToken: false
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloud-build-sa
  namespace: secure-builds
automountServiceAccountToken: false
---
# Minimal RBAC for build operations (if needed)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: build-role
  namespace: secure-builds
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
  resourceNames: ["kaniko-build-config", "buildah-config"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kaniko-build-binding
  namespace: secure-builds
subjects:
- kind: ServiceAccount
  name: kaniko-sa
  namespace: secure-builds
roleRef:
  kind: Role
  name: build-role
  apiGroup: rbac.authorization.k8s.io
---
# Network Policies for build isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: build-isolation
  namespace: secure-builds
spec:
  podSelector:
    matchLabels:
      app: kaniko-builder
  policyTypes:
  - Ingress
  - Egress
  ingress: []  # No ingress allowed
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow HTTPS to external registries
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
  # Block internal cluster communication
---
# Security scanning job that runs after build
apiVersion: batch/v1
kind: Job
metadata:
  name: security-scan
  namespace: secure-builds
spec:
  template:
    spec:
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: trivy-scan
        image: aquasecurity/trivy:latest
        command: ["trivy"]
        args:
        - "image"
        - "--format=json"
        - "--exit-code=1"
        - "--severity=HIGH,CRITICAL"
        - "secure-app:latest"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
---
# Resource Quota to prevent resource exhaustion
apiVersion: v1
kind: ResourceQuota
metadata:
  name: build-quota
  namespace: secure-builds
spec:
  hard:
    requests.cpu: "2"
    requests.memory: 4Gi
    limits.cpu: "4"
    limits.memory: 8Gi
    persistentvolumeclaims: "0"  # No persistent storage allowed
    pods: "10"
    secrets: "5"
    configmaps: "10"
---
# Limit Range for individual pods
apiVersion: v1
kind: LimitRange
metadata:
  name: build-limits
  namespace: secure-builds
spec:
  limits:
  - default:
      cpu: "500m"
      memory: "512Mi"
    defaultRequest:
      cpu: "250m"
      memory: "256Mi"
    type: Container
  - max:
      cpu: "1"
      memory: "1Gi"
    type: Container