# HPA and VPA Together - The Complete Autoscaling Solution
# WHY: HPA scales horizontally (more pods), VPA scales vertically (bigger pods)
# IMPORTANT: Use VPA in "Initial" mode when combining with HPA to avoid conflicts

apiVersion: apps/v1
kind: Deployment
metadata:
  name: complete-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: complete-app
  template:
    metadata:
      labels:
        app: complete-app
    spec:
      containers:
      - name: complete-app
        image: nginx:1.21
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        ports:
        - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: complete-app-service
spec:
  selector:
    app: complete-app
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP

---
# VPA for right-sizing (recommendation or initial mode only)
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: complete-app-vpa
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: complete-app
  
  updatePolicy:
    updateMode: "Initial"    # CRITICAL: Use "Initial" or "Off" when using with HPA
    # "Initial" only sets requests for new pods (created by HPA)
    # This avoids conflicts between HPA and VPA
  
  resourcePolicy:
    containerPolicies:
    - containerName: complete-app
      minAllowed:
        cpu: 50m
        memory: 64Mi
      maxAllowed:
        cpu: 1000m
        memory: 1Gi
      controlledResources: ["cpu", "memory"]

---
# HPA for scaling out (more pods)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: complete-app-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: complete-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30

---
# How this works together:
# 1. VPA analyzes resource usage and provides recommendations
# 2. VPA sets appropriate requests for NEW pods (Initial mode)
# 3. HPA scales based on utilization of properly-sized pods
# 4. Result: Optimal number of optimally-sized pods
#
# Monitoring commands:
# kubectl get hpa complete-app-hpa --watch
# kubectl get vpa complete-app-vpa -o yaml
# kubectl top pods -l app=complete-app