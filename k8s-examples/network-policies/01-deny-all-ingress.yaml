# Deny All Ingress Traffic - Security Foundation
# This is the starting point for secure network policies

---
# Demo namespace with clear labels
apiVersion: v1
kind: Namespace
metadata:
  name: secure-demo
  labels:
    network-policy: "enabled"
    security-level: "high"

---
# Sample application pods for testing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app
  namespace: secure-demo
  labels:
    app: web-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web-app
  template:
    metadata:
      labels:
        app: web-app
        tier: frontend
    spec:
      containers:
      - name: web
        image: nginx:1.27
        ports:
        - containerPort: 80

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server
  namespace: secure-demo
  labels:
    app: api-server
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-server
  template:
    metadata:
      labels:
        app: api-server
        tier: backend
    spec:
      containers:
      - name: api
        image: httpd:2.4
        ports:
        - containerPort: 80

---
# Services for the applications
apiVersion: v1
kind: Service
metadata:
  name: web-app-service
  namespace: secure-demo
spec:
  selector:
    app: web-app
  ports:
  - port: 80
    targetPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: api-server-service
  namespace: secure-demo
spec:
  selector:
    app: api-server
  ports:
  - port: 80
    targetPort: 80

---
# Test client pod
apiVersion: v1
kind: Pod
metadata:
  name: test-client
  namespace: secure-demo
  labels:
    app: test-client
    role: testing
spec:
  containers:
  - name: client
    image: busybox:1.36
    command: ["sleep", "3600"]

---
# NETWORK POLICY: Deny all ingress traffic
# This creates a "default deny" security posture
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-all-ingress
  namespace: secure-demo
  annotations:
    description: "Default deny all ingress traffic - security foundation"
spec:
  # Apply to ALL pods in the namespace
  podSelector: {}
  
  # Only affects ingress traffic (incoming to pods)
  policyTypes:
  - Ingress
  
  # No ingress rules = deny all ingress traffic
  # (empty ingress array means "no traffic allowed")

---
# WHY THIS WORKS:
# 
# Without Network Policies:
# - All pods can communicate with all other pods
# - "Default allow all" model - like no firewall
#
# With this Deny-All Policy:
# - All incoming traffic to pods is blocked
# - Must explicitly allow traffic with additional policies
# - "Default deny all" model - like enabling firewall
#
# What gets blocked:
# - Pod-to-pod communication within namespace
# - Cross-namespace communication to these pods  
# - External traffic to these pods
#
# What still works:
# - Outgoing traffic from pods (egress not restricted)
# - Pod can still make external requests
# - DNS still works (egress to kube-dns)

# TESTING COMMANDS:
#
# 1. Deploy without network policy first:
# kubectl apply -f 01-deny-all-ingress.yaml --exclude-kind=NetworkPolicy
#
# 2. Test connectivity (should work):
# kubectl exec -it test-client -n secure-demo -- nc -zv web-app-service 80
# kubectl exec -it test-client -n secure-demo -- nc -zv api-server-service 80
# kubectl exec -it test-client -n secure-demo -- wget -qO- http://web-app-service
#
# 3. Apply the network policy:
# kubectl apply -f 01-deny-all-ingress.yaml --resource=NetworkPolicy
#
# 4. Test connectivity again (should fail):
# kubectl exec -it test-client -n secure-demo -- nc -zv web-app-service 80
# kubectl exec -it test-client -n secure-demo -- nc -zv api-server-service 80
# kubectl exec -it test-client -n secure-demo -- wget -qO- http://web-app-service --timeout=5
#
# 5. Test outgoing connectivity (should still work):
# kubectl exec -it test-client -n secure-demo -- wget -qO- http://httpbin.org/get --timeout=10
# kubectl exec -it test-client -n secure-demo -- nslookup google.com
#
# 6. Check network policy:
# kubectl get networkpolicy -n secure-demo
# kubectl describe networkpolicy deny-all-ingress -n secure-demo