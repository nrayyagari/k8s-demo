# SIMPLE NETWORK POLICIES: Start Here
# Basic network policy setup to understand pod-to-pod communication control

---
# 1. Create namespace for our example
apiVersion: v1
kind: Namespace
metadata:
  name: netpol-demo
  labels:
    purpose: learning-network-policies

---
# 2. Frontend application pod
apiVersion: v1
kind: Pod
metadata:
  name: frontend
  namespace: netpol-demo
  labels:
    app: frontend
    tier: frontend
spec:
  containers:
  - name: frontend
    image: nginx:1.27
    ports:
    - containerPort: 80
    env:
    - name: BACKEND_URL 
      value: "http://backend:8080"

---
# 3. Backend application pod
apiVersion: v1
kind: Pod
metadata:
  name: backend
  namespace: netpol-demo
  labels:
    app: backend
    tier: backend
spec:
  containers:
  - name: backend
    image: httpd:2.4
    ports:
    - containerPort: 8080

---
# 4. Database pod
apiVersion: v1
kind: Pod
metadata:
  name: database
  namespace: netpol-demo
  labels:
    app: database
    tier: database
spec:
  containers:
  - name: database
    image: postgres:16
    ports:
    - containerPort: 5432
    env:
    - name: POSTGRES_PASSWORD
      value: "demo123"

---
# 5. Services for pod communication
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: netpol-demo
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: netpol-demo
spec:
  selector:
    app: backend
  ports:
  - port: 8080
    targetPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: database
  namespace: netpol-demo
spec:
  selector:
    app: database
  ports:
  - port: 5432
    targetPort: 5432

---
# 6. Test pod for connectivity testing
apiVersion: v1
kind: Pod
metadata:
  name: test-client
  namespace: netpol-demo
  labels:
    app: test-client
spec:
  containers:
  - name: test
    image: busybox:1.36
    command: ["sleep", "3600"]

---
# 7. DENY ALL ingress traffic (default deny)
# This blocks ALL incoming traffic to pods in this namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-all-ingress
  namespace: netpol-demo
spec:
  podSelector: {}  # Apply to all pods in namespace
  policyTypes:
  - Ingress

---
# 8. ALLOW frontend to backend communication
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-frontend-to-backend
  namespace: netpol-demo
spec:
  podSelector:
    matchLabels:
      tier: backend  # Apply to backend pods
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          tier: frontend  # Allow traffic from frontend pods
    ports:
    - protocol: TCP
      port: 8080

---
# 9. ALLOW backend to database communication
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-backend-to-database
  namespace: netpol-demo
spec:
  podSelector:
    matchLabels:
      tier: database  # Apply to database pods
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          tier: backend  # Allow traffic from backend pods
    ports:
    - protocol: TCP
      port: 5432

# Test the network policies:
# 
# 1. Deploy everything:
# kubectl apply -f SIMPLE-NETWORKPOLICIES.yaml
#
# 2. Test initial connectivity (should work - no policies applied yet):
# kubectl exec -it test-client -n netpol-demo -- nc -zv frontend 80
# kubectl exec -it test-client -n netpol-demo -- nc -zv backend 8080  
# kubectl exec -it test-client -n netpol-demo -- nc -zv database 5432
#
# 3. Apply deny-all policy and test (should fail):
# kubectl exec -it test-client -n netpol-demo -- nc -zv backend 8080
# kubectl exec -it test-client -n netpol-demo -- nc -zv database 5432
#
# 4. Test allowed communication (should work):
# kubectl exec -it frontend -n netpol-demo -- nc -zv backend 8080
# kubectl exec -it backend -n netpol-demo -- nc -zv database 5432
#
# 5. Test denied communication (should fail):  
# kubectl exec -it frontend -n netpol-demo -- nc -zv database 5432
# kubectl exec -it test-client -n netpol-demo -- nc -zv backend 8080
#
# 6. View network policies:
# kubectl get networkpolicies -n netpol-demo
# kubectl describe networkpolicy deny-all-ingress -n netpol-demo